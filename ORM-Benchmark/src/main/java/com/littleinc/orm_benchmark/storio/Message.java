package com.littleinc.orm_benchmark.storio;

import android.provider.BaseColumns;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.littleinc.orm_benchmark.util.Util;
import com.pushtorefresh.storio.sqlite.StorIOSQLite;
import com.pushtorefresh.storio.sqlite.annotations.StorIOSQLiteColumn;
import com.pushtorefresh.storio.sqlite.annotations.StorIOSQLiteType;
import com.pushtorefresh.storio.sqlite.queries.Query;
import com.pushtorefresh.storio.sqlite.queries.RawQuery;

import static com.littleinc.orm_benchmark.storio.Message.TABLE_NAME;

/**
 * Class description!!
 */

@StorIOSQLiteType(table = TABLE_NAME)
public class Message {

    public static final String TABLE_NAME = "message";

    public static final String CONTENT = "content";

    public static final String READERS = "readers";

    public static final String SORTED_BY = "sorted_by";

    public static final String CLIENT_ID = "client_id";

    public static final String SENDER_ID = "sender_id";

    public static final String CHANNEL_ID = "channel_id";

    public static final String COMMAND_ID = "command_id";

    public static final String CREATED_AT = "created_at";

    @Nullable
    @StorIOSQLiteColumn(name = BaseColumns._ID, key = true)
    Long mId;

    @StorIOSQLiteColumn(name = CLIENT_ID)
    long clientId;

    @StorIOSQLiteColumn(name = COMMAND_ID)
    long commandId;

    @StorIOSQLiteColumn(name = SORTED_BY)
    double sortedBy;

    @StorIOSQLiteColumn(name = CREATED_AT)
    int createdAt;

    @StorIOSQLiteColumn(name = CONTENT)
    String content;

    @StorIOSQLiteColumn(name = SENDER_ID)
    long senderId;

    @StorIOSQLiteColumn(name = CHANNEL_ID)
    long channelId;

    @NonNull
    public static Message newMessage(long commandId, int totalNumber) {
        Message message = new Message();
        message.clientId = System.currentTimeMillis();
        message.commandId = commandId;
        message.sortedBy = System.nanoTime();
        message.createdAt = (int) (System.currentTimeMillis() / 1000L);
        message.content = Util.getRandomString(100);
        message.senderId = Math.round(Math.random() * totalNumber);
        message.channelId = Math.round(Math.random() * totalNumber);
        return message;
    }

    public Long id()
    {
        return mId;
    }

    public long clientId()
    {
        return clientId;
    }

    public long commandId()
    {
        return commandId;
    }

    public double sortedBy()
    {
        return sortedBy;
    }

    public int createdAt()
    {
        return createdAt;
    }

    public String content()
    {
        return content;
    }

    public long senderId()
    {
        return senderId;
    }

    public long channelId()
    {
        return channelId;
    }

    // leave default constructor for AutoGenerated code!
    public Message() {
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Message message = (Message) o;

        if (mId != null ? !mId.equals(message.mId) : message.mId != null) return false;
/*
        if (mFirstName != null ? !mFirstName.equals(user.mFirstName) : user.mFirstName != null) return false;

        if (mLastName != null ? !mLastName.equals(user.mLastName) : user.mLastName != null) return false;*/
        return true;
    }

    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + ((mId != null) ? mId.hashCode() : 0);/*
        result = 31 * result + ((mFirstName != null) ? mFirstName.hashCode() : 0);
        result = 31 * result + ((mLastName != null) ? mLastName.hashCode() : 0);*/
        return result;
    }

    @Override
    public String toString() {
        return "Message{" +
            "id=" + mId + ", " +/*
            "firstName='" + mFirstName + ", " +
            "lastName='" + mLastName +*/
            '}';
    }

    public static void createTable(StorIOSQLite helper) {
        helper.executeSQL().withQuery(RawQuery.builder().query(getCreateTableQuery()).build()).prepare().executeAsBlocking();
        helper.executeSQL().withQuery(RawQuery.builder().query(getCreateIndexQuery()).build()).prepare().executeAsBlocking();
    }

    public static void dropTable(StorIOSQLite helper) {
        helper.executeSQL().withQuery(RawQuery.builder().query(
            new StringBuilder("DROP TABLE '").append(TABLE_NAME).append("';").toString()
        ).build()).prepare().executeAsBlocking();
    }

    @NonNull
    private static String getCreateTableQuery() {
        return new StringBuilder("CREATE TABLE '").append(TABLE_NAME)
            .append("' ('").append(BaseColumns._ID)
            .append("' INTEGER PRIMARY KEY AUTOINCREMENT, '")
            .append(CLIENT_ID).append("' INTEGER, '").append(SORTED_BY)
            .append("' REAL, '").append(CREATED_AT).append("' INTEGER, '")
            .append(CONTENT).append("' TEXT, '").append(SENDER_ID)
            .append("' INTEGER NOT NULL, '").append(CHANNEL_ID)
            .append("' INTEGER NOT NULL, '").append(COMMAND_ID)
            .append("' INTEGER);").toString();
    }

    private static String getCreateIndexQuery() {
        return new StringBuilder("CREATE INDEX IDX_MESSAGE_COMMAND_ID ON ")
            .append(TABLE_NAME).append(" (").append(COMMAND_ID)
            .append(");").toString();
    }

    @NonNull
    public static final Query QUERY_ALL = Query.builder()
        .table(TABLE_NAME)
        .build();
}

