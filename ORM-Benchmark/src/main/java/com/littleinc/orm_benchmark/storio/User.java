package com.littleinc.orm_benchmark.storio;

import android.provider.BaseColumns;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.pushtorefresh.storio.sqlite.StorIOSQLite;
import com.pushtorefresh.storio.sqlite.annotations.StorIOSQLiteColumn;
import com.pushtorefresh.storio.sqlite.annotations.StorIOSQLiteType;
import com.pushtorefresh.storio.sqlite.queries.RawQuery;

import static com.littleinc.orm_benchmark.storio.User.TABLE_NAME;

@StorIOSQLiteType(table = TABLE_NAME)
public class User {

    public static final String TABLE_NAME = "user";
    public static final String LAST_NAME = "LAST_NAME";
    public static final String FIRST_NAME = "FIRST_NAME";

    @Nullable
    @StorIOSQLiteColumn(name = BaseColumns._ID, key = true)
    Long mId;

    @Nullable
    @StorIOSQLiteColumn(name = LAST_NAME)
    String mLastName;

    @Nullable
    @StorIOSQLiteColumn(name = FIRST_NAME)
    String mFirstName;

    @NonNull
    public static User newUser(@Nullable Long id, @Nullable String firstName, @Nullable String lastName) {
        User user = new User();
        user.mId = id;
        user.mFirstName = firstName;
        user.mLastName = lastName;
        return user;
    }

    @Nullable
    public long id()
    {
        return mId;
    }

    @Nullable
    public String lastName()
    {
        return mLastName;
    }

    @Nullable
    public String firstName()
    {
        return mFirstName;
    }

    // leave default constructor for AutoGenerated code!
    public User() {
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        User user = (User) o;

        if (mId != null ? !mId.equals(user.mId) : user.mId != null) return false;

        if (mFirstName != null ? !mFirstName.equals(user.mFirstName) : user.mFirstName != null) return false;

        if (mLastName != null ? !mLastName.equals(user.mLastName) : user.mLastName != null) return false;
        return true;
    }

    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + ((mId != null) ? mId.hashCode() : 0);
        result = 31 * result + ((mFirstName != null) ? mFirstName.hashCode() : 0);
        result = 31 * result + ((mLastName != null) ? mLastName.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "User{" +
            "id=" + mId + ", " +
            "firstName='" + mFirstName + ", " +
            "lastName='" + mLastName +
            '}';
    }

    @NonNull
    private static String getCreateTableQuery() {
        return new StringBuilder("CREATE TABLE '").append(TABLE_NAME)
            .append("' ('").append(BaseColumns._ID)
            .append("' INTEGER PRIMARY KEY AUTOINCREMENT, '")
            .append(LAST_NAME).append("' TEXT, '")
            .append(FIRST_NAME).append("' TEXT);")
            .toString();
    }

    public static void createTable(StorIOSQLite helper) {
        helper.executeSQL().withQuery(RawQuery.builder().query(getCreateTableQuery()).build())
            .prepare().executeAsBlocking();
    }

    public static void dropTable(StorIOSQLite helper) {
        helper.executeSQL().withQuery(RawQuery.builder().query(
            new StringBuilder("DROP TABLE '").append(TABLE_NAME).append("';").toString()
        ).build()).prepare().executeAsBlocking();
    }
}
